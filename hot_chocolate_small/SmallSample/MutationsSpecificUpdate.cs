// Auto-generated by x10 - do not edit
using System;
using System.Collections.Generic;
using System.Linq;

using HotChocolate;
using HotChocolate.Types;

using x10.hotchoc.SmallSample.Entities;
using x10.hotchoc.SmallSample.Repositories;

namespace x10.hotchoc.SmallSample {
  [ExtendObjectType(Name = "Mutation")]
  public partial class Mutations {

    #region MoveForm
    /// <summary>
    /// Input Data Type for MoveFormUpdateMove Mutation
    /// </summary>
    public class MoveFormMove : Base {
      public DateTime? Date { get; set; }
      public IdWrapper? From { get; set; }
      public IdWrapper? To { get; set; }
      public IdWrapper? Tenant { get; set; }
    }

    /// <summary>
    /// Update mutation for the MoveForm component
    /// </summary>
    public virtual Move MoveFormUpdateMove(
      MoveFormMove data,
      [Service] IRepository repository) {

      int? id = IdUtils.FromFrontEndId(data.Id);
      Move entity = id == null ? new Move() : repository.GetMove(id.Value);

      entity.Date = data.Date;
      entity.From = new Building() { Id = data.From.Id };
      entity.To = new Building() { Id = data.To.Id };
      entity.Tenant = new Tenant() { Id = data.Tenant.Id };

      entity.SetNonOwnedAssociations(repository);
      repository.AddOrUpdateMove(id, entity);

      return entity;
    }
    #endregion

    #region BuildingForm
    /// <summary>
    /// Input Data Type for BuildingFormUpdateBuilding Mutation
    /// </summary>
    public class BuildingFormBuilding : Base {
      public Address PhysicalAddress { get; set; }
      public string? Moniker { get; set; }
      public string? Name { get; set; }
      public string? Description { get; set; }
      public bool MailingAddressSameAsPhysical { get; set; }
      public Address MailingAddress { get; set; }
      public DateTime? DateOfOccupancy { get; set; }
      public MailboxTypeEnum? MailboxType { get; set; }
      public PetPolicyEnum? PetPolicy { get; set; }
      public List<Unit>? Units { get; set; }
    }

    /// <summary>
    /// Update mutation for the BuildingForm component
    /// </summary>
    public virtual Building BuildingFormUpdateBuilding(
      BuildingFormBuilding data,
      [Service] IRepository repository) {

      int? id = IdUtils.FromFrontEndId(data.Id);
      Building entity = id == null ? new Building() : repository.GetBuilding(id.Value);

      entity.Moniker = data.Moniker;
      entity.Name = data.Name;
      entity.Description = data.Description;
      entity.DateOfOccupancy = data.DateOfOccupancy;
      entity.MailboxType = data.MailboxType;
      entity.PetPolicy = data.PetPolicy;
      entity.MailingAddressSameAsPhysical = data.MailingAddressSameAsPhysical;
      entity.Units = data.Units;
      entity.PhysicalAddress = data.PhysicalAddress;
      entity.MailingAddress = data.MailingAddress;

      entity.SetNonOwnedAssociations(repository);
      repository.AddOrUpdateBuilding(id, entity);

      return entity;
    }
    #endregion

    #region TenantForm
    /// <summary>
    /// Input Data Type for TenantFormUpdateTenant Mutation
    /// </summary>
    public class TenantFormTenant : Base {
      public string? Name { get; set; }
      public string? Phone { get; set; }
      public string? Email { get; set; }
      public Address PermanentMailingAddress { get; set; }
    }

    /// <summary>
    /// Update mutation for the TenantForm component
    /// </summary>
    public virtual Tenant TenantFormUpdateTenant(
      TenantFormTenant data,
      [Service] IRepository repository) {

      int? id = IdUtils.FromFrontEndId(data.Id);
      Tenant entity = id == null ? new Tenant() : repository.GetTenant(id.Value);

      entity.Name = data.Name;
      entity.Phone = data.Phone;
      entity.Email = data.Email;
      entity.PermanentMailingAddress = data.PermanentMailingAddress;

      entity.SetNonOwnedAssociations(repository);
      repository.AddOrUpdateTenant(id, entity);

      return entity;
    }
    #endregion

  }
}
