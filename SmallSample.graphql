schema {
  query: Query
  mutation: Mutation
}

"A physical or mailing address"
type Address {
  unitNumber: String
  theAddress: String
  city: String
  stateOrProvince: String
  zip: String
  country: Country!
  id: String!
}

"A physical building which contains rental units"
type Building {
  moniker: String
  name: String
  description: String
  dateOfOccupancy: DateTime
  mailboxType: MailboxTypeEnum
  petPolicy: PetPolicyEnum
  mailingAddressSameAsPhysical: Boolean!
  units: [Unit!]!
  physicalAddress: Address!
  mailingAddress: Address
  id: String!
}

"Represents a Country"
type Country {
  code: String
  name: String
  id: String!
}

"Somewhat contrived move event from one apartment to another"
type Move {
  date: DateTime
  from: Building!
  to: Building!
  tenant: Tenant!
  id: String!
}

type Mutation {
  "Update mutation for the MoveForm component"
  moveFormUpdateMove(data: MoveFormMoveInput!): Move!
  "Update mutation for the BuildingForm component"
  buildingFormUpdateBuilding(data: BuildingFormBuildingInput!): Building!
  "Update mutation for the TenantForm component"
  tenantFormUpdateTenant(data: TenantFormTenantInput!): Tenant!
}

type Query {
  "Retrieve a Building by id\n\n\n**Returns:**\nThe Building."
  building("The id of the Building." id: String!): Building!
  "Gets all Buildings.\n\n\n**Returns:**\nAll Buildings."
  buildings(where: BuildingFilter order_by: BuildingSort): [Building!]!
  "Retrieve a Move by id\n\n\n**Returns:**\nThe Move."
  move("The id of the Move." id: String!): Move!
  "Gets all Moves.\n\n\n**Returns:**\nAll Moves."
  moves(where: MoveFilter order_by: MoveSort): [Move!]!
  "Retrieve a Tenant by id\n\n\n**Returns:**\nThe Tenant."
  tenant("The id of the Tenant." id: String!): Tenant!
  "Gets all Tenants.\n\n\n**Returns:**\nAll Tenants."
  tenants(where: TenantFilter order_by: TenantSort): [Tenant!]!
  "Retrieve a Address by id\n\n\n**Returns:**\nThe Address."
  address("The id of the Address." id: String!): Address!
  "Gets all Addresses.\n\n\n**Returns:**\nAll Addresses."
  addresses(where: AddressFilter order_by: AddressSort): [Address!]!
  "Retrieve a Country by id\n\n\n**Returns:**\nThe Country."
  country("The id of the Country." id: String!): Country!
  "Gets all Countries.\n\n\n**Returns:**\nAll Countries."
  countries(where: CountryFilter order_by: CountrySort): [Country!]!
  "Retrieve a Unit by id\n\n\n**Returns:**\nThe Unit."
  unit("The id of the Unit." id: String!): Unit!
  "Gets all Units.\n\n\n**Returns:**\nAll Units."
  units(where: UnitFilter order_by: UnitSort): [Unit!]!
}

"Tenant of a Unit"
type Tenant {
  name: String
  phone: String
  email: String
  permanentMailingAddress: Address!
  id: String!
}

"An individual rental unit"
type Unit {
  number: String
  squareFeet: Float
  numberOfBedrooms: Int
  numberOfBathrooms: NumberOfBathroomsEnum
  hasBalcony: Boolean!
  id: String!
}

"A physical or mailing address"
input AddressFilter {
  AND: [AddressFilter!]
  OR: [AddressFilter!]
  unitNumber: String
  unitNumber_not: String
  unitNumber_contains: String
  unitNumber_not_contains: String
  unitNumber_starts_with: String
  unitNumber_not_starts_with: String
  unitNumber_ends_with: String
  unitNumber_not_ends_with: String
  unitNumber_in: [String]
  unitNumber_not_in: [String]
  theAddress: String
  theAddress_not: String
  theAddress_contains: String
  theAddress_not_contains: String
  theAddress_starts_with: String
  theAddress_not_starts_with: String
  theAddress_ends_with: String
  theAddress_not_ends_with: String
  theAddress_in: [String]
  theAddress_not_in: [String]
  city: String
  city_not: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  city_in: [String]
  city_not_in: [String]
  stateOrProvince: String
  stateOrProvince_not: String
  stateOrProvince_contains: String
  stateOrProvince_not_contains: String
  stateOrProvince_starts_with: String
  stateOrProvince_not_starts_with: String
  stateOrProvince_ends_with: String
  stateOrProvince_not_ends_with: String
  stateOrProvince_in: [String]
  stateOrProvince_not_in: [String]
  zip: String
  zip_not: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  zip_in: [String]
  zip_not_in: [String]
  country: CountryFilter
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"A physical or mailing address"
input AddressInput {
  unitNumber: String
  theAddress: String
  city: String
  stateOrProvince: String
  zip: String
  country: CountryInput!
  id: String!
}

"A physical or mailing address"
input AddressSort {
  unitNumber: SortOperationKind
  theAddress: SortOperationKind
  city: SortOperationKind
  stateOrProvince: SortOperationKind
  zip: SortOperationKind
  country: CountrySort
  id: SortOperationKind
}

"A physical building which contains rental units"
input BuildingFilter {
  AND: [BuildingFilter!]
  OR: [BuildingFilter!]
  moniker: String
  moniker_not: String
  moniker_contains: String
  moniker_not_contains: String
  moniker_starts_with: String
  moniker_not_starts_with: String
  moniker_ends_with: String
  moniker_not_ends_with: String
  moniker_in: [String]
  moniker_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_in: [String]
  description_not_in: [String]
  dateOfOccupancy: DateTime
  dateOfOccupancy_not: DateTime
  dateOfOccupancy_in: [DateTime]
  dateOfOccupancy_not_in: [DateTime]
  dateOfOccupancy_gt: DateTime
  dateOfOccupancy_not_gt: DateTime
  dateOfOccupancy_gte: DateTime
  dateOfOccupancy_not_gte: DateTime
  dateOfOccupancy_lt: DateTime
  dateOfOccupancy_not_lt: DateTime
  dateOfOccupancy_lte: DateTime
  dateOfOccupancy_not_lte: DateTime
  mailboxType: MailboxTypeEnum
  mailboxType_not: MailboxTypeEnum
  mailboxType_in: [MailboxTypeEnum]
  mailboxType_not_in: [MailboxTypeEnum]
  mailboxType_gt: MailboxTypeEnum
  mailboxType_not_gt: MailboxTypeEnum
  mailboxType_gte: MailboxTypeEnum
  mailboxType_not_gte: MailboxTypeEnum
  mailboxType_lt: MailboxTypeEnum
  mailboxType_not_lt: MailboxTypeEnum
  mailboxType_lte: MailboxTypeEnum
  mailboxType_not_lte: MailboxTypeEnum
  petPolicy: PetPolicyEnum
  petPolicy_not: PetPolicyEnum
  petPolicy_in: [PetPolicyEnum]
  petPolicy_not_in: [PetPolicyEnum]
  petPolicy_gt: PetPolicyEnum
  petPolicy_not_gt: PetPolicyEnum
  petPolicy_gte: PetPolicyEnum
  petPolicy_not_gte: PetPolicyEnum
  petPolicy_lt: PetPolicyEnum
  petPolicy_not_lt: PetPolicyEnum
  petPolicy_lte: PetPolicyEnum
  petPolicy_not_lte: PetPolicyEnum
  mailingAddressSameAsPhysical: Boolean
  mailingAddressSameAsPhysical_not: Boolean
  units_some: UnitFilter
  units_none: UnitFilter
  units_all: UnitFilter
  units_any: Boolean
  physicalAddress: AddressFilter
  mailingAddress: AddressFilter
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"Input Data Type for BuildingFormUpdateBuilding Mutation"
input BuildingFormBuildingInput {
  physicalAddress: AddressInput!
  dateOfOccupancy: DateTime
  moniker: String
  name: String
  description: String
  mailingAddressSameAsPhysical: Boolean!
  mailingAddress: AddressInput!
  mailboxType: MailboxTypeEnum
  petPolicy: PetPolicyEnum
  units: [UnitInput!]!
  id: String!
}

"A physical building which contains rental units"
input BuildingSort {
  moniker: SortOperationKind
  name: SortOperationKind
  description: SortOperationKind
  dateOfOccupancy: SortOperationKind
  mailboxType: SortOperationKind
  petPolicy: SortOperationKind
  mailingAddressSameAsPhysical: SortOperationKind
  physicalAddress: AddressSort
  mailingAddress: AddressSort
  id: SortOperationKind
}

"Represents a Country"
input CountryFilter {
  AND: [CountryFilter!]
  OR: [CountryFilter!]
  code: String
  code_not: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  code_in: [String]
  code_not_in: [String]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String]
  name_not_in: [String]
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"Represents a Country"
input CountryInput {
  code: String
  name: String
  id: String!
}

"Represents a Country"
input CountrySort {
  code: SortOperationKind
  name: SortOperationKind
  id: SortOperationKind
}

input IdWrapperInput {
  id: String!
}

"Somewhat contrived move event from one apartment to another"
input MoveFilter {
  AND: [MoveFilter!]
  OR: [MoveFilter!]
  date: DateTime
  date_not: DateTime
  date_in: [DateTime]
  date_not_in: [DateTime]
  date_gt: DateTime
  date_not_gt: DateTime
  date_gte: DateTime
  date_not_gte: DateTime
  date_lt: DateTime
  date_not_lt: DateTime
  date_lte: DateTime
  date_not_lte: DateTime
  from: BuildingFilter
  to: BuildingFilter
  tenant: TenantFilter
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"Input Data Type for MoveFormUpdateMove Mutation"
input MoveFormMoveInput {
  date: DateTime
  from: IdWrapperInput!
  to: IdWrapperInput!
  tenant: IdWrapperInput!
  id: String!
}

"Somewhat contrived move event from one apartment to another"
input MoveSort {
  date: SortOperationKind
  from: BuildingSort
  to: BuildingSort
  tenant: TenantSort
  id: SortOperationKind
}

"Tenant of a Unit"
input TenantFilter {
  AND: [TenantFilter!]
  OR: [TenantFilter!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_in: [String]
  name_not_in: [String]
  phone: String
  phone_not: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone_in: [String]
  phone_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_in: [String]
  email_not_in: [String]
  permanentMailingAddress: AddressFilter
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"Input Data Type for TenantFormUpdateTenant Mutation"
input TenantFormTenantInput {
  name: String
  phone: String
  email: String
  permanentMailingAddress: AddressInput!
  id: String!
}

"Tenant of a Unit"
input TenantSort {
  name: SortOperationKind
  phone: SortOperationKind
  email: SortOperationKind
  permanentMailingAddress: AddressSort
  id: SortOperationKind
}

"An individual rental unit"
input UnitFilter {
  AND: [UnitFilter!]
  OR: [UnitFilter!]
  number: String
  number_not: String
  number_contains: String
  number_not_contains: String
  number_starts_with: String
  number_not_starts_with: String
  number_ends_with: String
  number_not_ends_with: String
  number_in: [String]
  number_not_in: [String]
  squareFeet: Float
  squareFeet_not: Float
  squareFeet_in: [Float]
  squareFeet_not_in: [Float]
  squareFeet_gt: Float
  squareFeet_not_gt: Float
  squareFeet_gte: Float
  squareFeet_not_gte: Float
  squareFeet_lt: Float
  squareFeet_not_lt: Float
  squareFeet_lte: Float
  squareFeet_not_lte: Float
  numberOfBedrooms: Int
  numberOfBedrooms_not: Int
  numberOfBedrooms_in: [Int]
  numberOfBedrooms_not_in: [Int]
  numberOfBedrooms_gt: Int
  numberOfBedrooms_not_gt: Int
  numberOfBedrooms_gte: Int
  numberOfBedrooms_not_gte: Int
  numberOfBedrooms_lt: Int
  numberOfBedrooms_not_lt: Int
  numberOfBedrooms_lte: Int
  numberOfBedrooms_not_lte: Int
  numberOfBathrooms: NumberOfBathroomsEnum
  numberOfBathrooms_not: NumberOfBathroomsEnum
  numberOfBathrooms_in: [NumberOfBathroomsEnum]
  numberOfBathrooms_not_in: [NumberOfBathroomsEnum]
  numberOfBathrooms_gt: NumberOfBathroomsEnum
  numberOfBathrooms_not_gt: NumberOfBathroomsEnum
  numberOfBathrooms_gte: NumberOfBathroomsEnum
  numberOfBathrooms_not_gte: NumberOfBathroomsEnum
  numberOfBathrooms_lt: NumberOfBathroomsEnum
  numberOfBathrooms_not_lt: NumberOfBathroomsEnum
  numberOfBathrooms_lte: NumberOfBathroomsEnum
  numberOfBathrooms_not_lte: NumberOfBathroomsEnum
  hasBalcony: Boolean
  hasBalcony_not: Boolean
  id: String
  id_not: String
  id_contains: String
  id_not_contains: String
  id_starts_with: String
  id_not_starts_with: String
  id_ends_with: String
  id_not_ends_with: String
  id_in: [String!]
  id_not_in: [String!]
}

"An individual rental unit"
input UnitInput {
  number: String
  squareFeet: Float
  numberOfBedrooms: Int
  numberOfBathrooms: NumberOfBathroomsEnum
  hasBalcony: Boolean!
  id: String!
}

"An individual rental unit"
input UnitSort {
  number: SortOperationKind
  squareFeet: SortOperationKind
  numberOfBedrooms: SortOperationKind
  numberOfBathrooms: SortOperationKind
  hasBalcony: SortOperationKind
  id: SortOperationKind
}

enum MailboxTypeEnum {
  IN_BUILDING
  COMMUNITY
  INDIVIDUAL
}

enum NumberOfBathroomsEnum {
  HALF
  ONE
  ONE_AND_HALF
  TWO
  THREE
  FOUR_PLUS
}

enum PetPolicyEnum {
  NO_PETS
  ALL_PETS_OK
  CATS_ONLY
  DOGS_ONLY
}

enum SortOperationKind {
  ASC
  DESC
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

directive @tag(name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")