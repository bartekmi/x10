// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import Group from 'latitude/Group';
import Text from 'latitude/Text';

import EnumDisplay from 'react_lib/display/EnumDisplay';
import TextDisplay from 'react_lib/display/TextDisplay';
import Button from 'react_lib/latitude_wrappers/Button';
import VerticalStackPanel from 'react_lib/layout/VerticalStackPanel';
import Table from 'react_lib/table/Table';
import x10toString from 'react_lib/utils/x10toString';

import { ClientPrimaryShipmentRoleEnumPairs, ClientSegmentEnumPairs, ClientStatusEnumPairs, type Client } from 'client_page/entities/Client';

import { type Clients_clients } from './__generated__/Clients_clients.graphql';



type Props = {|
  +clients: Clients_clients,
|};
function Clients(props: Props): React.Node {
  const { clients } = props;

  return (
    <VerticalStackPanel>
      <Text
        scale='display'
        weight='bold'
        children='Clients'
      />
      <Table
        data={ clients }
        columns={
          [
            {
              id: '_0',
              Header: 'Legal Name',
              width: 140,
              accessor: (data) => data?.company?.primaryEntity?.legalName,
              Cell: ({ value }) =>
                <TextDisplay
                  value={ value }
                />
              ,
            },
            {
              id: '_1',
              Header: 'Status',
              width: 140,
              accessor: (data) => data?.status,
              Cell: ({ value }) =>
                <EnumDisplay
                  value={ value }
                  options={ ClientStatusEnumPairs }
                />
              ,
            },
            {
              id: '_2',
              Header: 'Segment',
              width: 140,
              accessor: (data) => data?.segment,
              Cell: ({ value }) =>
                <EnumDisplay
                  value={ value }
                  options={ ClientSegmentEnumPairs }
                />
              ,
            },
            {
              id: '_3',
              Header: 'Primary Shipment Role',
              width: 140,
              accessor: (data) => data?.primaryShipmentRole,
              Cell: ({ value }) =>
                <EnumDisplay
                  value={ value }
                  options={ ClientPrimaryShipmentRoleEnumPairs }
                />
              ,
            },
            {
              id: '_4',
              Header: 'Action',
              width: 140,
              accessor: (data) => data,
              Cell: ({ value }) =>
                <Group
                  alignItems='center'
                >
                  <Button
                    label='View'
                    url={ '/clients/view/' + x10toString(value?.id) }
                  />
                </Group>
              ,
            },
          ]
        }
      />
    </VerticalStackPanel>
  );
}

// $FlowExpectedError
export default createFragmentContainer(Clients, {
  clients: graphql`
    fragment Clients_clients on Client @relay(plural: true) {
      id
      company {
        id
        primaryEntity {
          id
          legalName
        }
      }
      primaryShipmentRole
      segment
      status
    }
  `,
});

