// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import Checkbox from 'latitude/Checkbox';
import Group from 'latitude/Group';
import SelectInput from 'latitude/select/SelectInput';
import Text from 'latitude/Text';

import TextDisplay from 'react_lib/display/TextDisplay';
import RadioGroup from 'react_lib/enum/RadioGroup';
import FormErrorDisplay from 'react_lib/form/FormErrorDisplay';
import FormField from 'react_lib/form/FormField';
import FormProvider from 'react_lib/form/FormProvider';
import FormSubmitButton from 'react_lib/form/FormSubmitButton';
import CalendarDateInput from 'react_lib/latitude_wrappers/CalendarDateInput';
import TextInput from 'react_lib/latitude_wrappers/TextInput';
import VerticalStackPanel from 'react_lib/layout/VerticalStackPanel';
import CancelDialogButton from 'react_lib/modal/CancelDialogButton';
import AssociationEditor from 'react_lib/multi/AssociationEditor';
import MultiStacker from 'react_lib/multi/MultiStacker';
import Separator from 'react_lib/Separator';
import StyleControl from 'react_lib/StyleControl';
import TabbedPane from 'react_lib/tab/TabbedPane';

import { createDefaultAddress } from 'client_page/entities/Address';
import { companyEntityApplicableWhenForPhysicalAddress, companyEntityCalculateErrors, CompanyEntityTypeEnumPairs, HkspFlexportEnumPairs, VendorCategoryEnumPairs, type CompanyEntity } from 'client_page/entities/CompanyEntity';
import { createDefaultHkspPartnerUse } from 'client_page/entities/HkspPartnerUse';
import { createDefaultVatNumber } from 'client_page/entities/VatNumber';



type Props = {|
  +companyEntity: CompanyEntity,
  +onChange: (companyEntity: CompanyEntity) => void,
|};
function CompanyEntityForm(props: Props): React.Node {
  const { companyEntity, onChange } = props;

  return (
    <FormProvider
      value={ { errors: companyEntityCalculateErrors(companyEntity) } }
    >
      <FormField
        editorFor='legalName'
        indicateRequired={ true }
        label='Legal Name'
      >
        <TextInput
          value={ companyEntity?.legalName }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, legalName: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='doingBusinessAs'
        label='Doing Business As'
      >
        <TextInput
          value={ companyEntity?.doingBusinessAs }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, doingBusinessAs: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='companyType'
        indicateRequired={ true }
        label='Type of Business'
      >
        <SelectInput
          value={ companyEntity?.companyType }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, companyType: value })
          } }
          options={ CompanyEntityTypeEnumPairs }
        />
      </FormField>
      <FormField
        editorFor='countryOfBusinessRegistration'
        label='Country / Region of Business Registration'
      >
        <AssociationEditor
          id={ companyEntity?.countryOfBusinessRegistration?.id }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, countryOfBusinessRegistration: value == null ? null : { id: value } })
          } }
          isNullable={ true }
          query={ countriesQuery }
          toString={ x => x.toStringRepresentation }
        />
      </FormField>
      <FormField
        editorFor='stateOfBusinessRegistration'
        label='State / Region of Business Registration'
      >
        <TextInput
          value={ companyEntity?.stateOfBusinessRegistration }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, stateOfBusinessRegistration: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='usTaxId'
        toolTip='Tax Id can be one of the following...'
        label='US Tax Id'
      >
        <TextInput
          value={ companyEntity?.usTaxId }
          onChange={ (value) => {
            // $FlowExpectedError
            onChange({ ...companyEntity, usTaxId: value })
          } }
        />
      </FormField>
      <TabbedPane
        tabs={
          [
            {
              id: 0,
              label: 'Address',
              displayFunc: () =>
                <VerticalStackPanel>
                  <VerticalStackPanel>
                    <TextDisplay
                      value='Mailing Address'
                    />
                    <Separator/>
                    <FormField
                      editorFor='mailingAddress.theAddress'
                      indicateRequired={ true }
                      label='Address'
                    >
                      <TextInput
                        value={ companyEntity?.mailingAddress?.theAddress }
                        onChange={ (value) => {
                          let newObj = JSON.parse(JSON.stringify(companyEntity));
                          newObj.companyEntity.mailingAddress.theAddress = value;
                          onChange(newObj);
                        } }
                      />
                    </FormField>
                    <FormField
                      editorFor='mailingAddress.theAddress2'
                      label='Address 2'
                    >
                      <TextInput
                        value={ companyEntity?.mailingAddress?.theAddress2 }
                        onChange={ (value) => {
                          let newObj = JSON.parse(JSON.stringify(companyEntity));
                          newObj.companyEntity.mailingAddress.theAddress2 = value;
                          onChange(newObj);
                        } }
                      />
                    </FormField>
                    <Group
                      alignItems='center'
                    >
                      <FormField
                        editorFor='mailingAddress.country'
                        indicateRequired={ true }
                        label='Country/Region'
                      >
                        <AssociationEditor
                          id={ companyEntity?.mailingAddress?.country?.id }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.companyEntity.mailingAddress.country = value == null ? null : { id: value };
                            onChange(newObj);
                          } }
                          isNullable={ false }
                          query={ countriesQuery }
                          toString={ x => x.toStringRepresentation }
                        />
                      </FormField>
                      <FormField
                        editorFor='mailingAddress.stateOrProvince'
                        indicateRequired={ true }
                        label='State Or Province'
                      >
                        <AssociationEditor
                          id={ companyEntity?.mailingAddress?.stateOrProvince?.id }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.companyEntity.mailingAddress.stateOrProvince = value == null ? null : { id: value };
                            onChange(newObj);
                          } }
                          isNullable={ false }
                          query={ stateOrProvincesQuery }
                          toString={ x => x.toStringRepresentation }
                        />
                      </FormField>
                    </Group>
                    <Group
                      alignItems='center'
                    >
                      <StyleControl
                        maxWidth={ 400 }
                      >
                        <FormField
                          editorFor='mailingAddress.city'
                          indicateRequired={ true }
                          label='City/Town'
                        >
                          <TextInput
                            value={ companyEntity?.mailingAddress?.city }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.companyEntity.mailingAddress.city = value;
                              onChange(newObj);
                            } }
                          />
                        </FormField>
                      </StyleControl>
                      <StyleControl
                        maxWidth={ 150 }
                      >
                        <FormField
                          editorFor='mailingAddress.postalCode'
                          label='Zip or Postal Code'
                        >
                          <TextInput
                            value={ companyEntity?.mailingAddress?.postalCode }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.companyEntity.mailingAddress.postalCode = value;
                              onChange(newObj);
                            } }
                          />
                        </FormField>
                      </StyleControl>
                    </Group>
                  </VerticalStackPanel>
                  <Checkbox
                    checked={ companyEntity?.mailingAddressIsPhysicalAddress }
                    onChange={ (value) => {
                      // $FlowExpectedError
                      onChange({ ...companyEntity, mailingAddressIsPhysicalAddress: value })
                    } }
                    label='Mailing Address is Physical Address'
                  />
                  <StyleControl
                    visible={ companyEntityApplicableWhenForPhysicalAddress(companyEntity) }
                  >
                    <VerticalStackPanel>
                      <TextDisplay
                        value='Physical Address'
                      />
                      <Separator/>
                      <FormField
                        editorFor='physicalAddress.theAddress'
                        indicateRequired={ true }
                        label='Address'
                      >
                        <TextInput
                          value={ companyEntity?.physicalAddress?.theAddress }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.companyEntity.physicalAddress.theAddress = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                      <FormField
                        editorFor='physicalAddress.theAddress2'
                        label='Address 2'
                      >
                        <TextInput
                          value={ companyEntity?.physicalAddress?.theAddress2 }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.companyEntity.physicalAddress.theAddress2 = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                      <Group
                        alignItems='center'
                      >
                        <FormField
                          editorFor='physicalAddress.country'
                          indicateRequired={ true }
                          label='Country/Region'
                        >
                          <AssociationEditor
                            id={ companyEntity?.physicalAddress?.country?.id }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.companyEntity.physicalAddress.country = value == null ? null : { id: value };
                              onChange(newObj);
                            } }
                            isNullable={ false }
                            query={ countriesQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                        <FormField
                          editorFor='physicalAddress.stateOrProvince'
                          indicateRequired={ true }
                          label='State Or Province'
                        >
                          <AssociationEditor
                            id={ companyEntity?.physicalAddress?.stateOrProvince?.id }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.companyEntity.physicalAddress.stateOrProvince = value == null ? null : { id: value };
                              onChange(newObj);
                            } }
                            isNullable={ false }
                            query={ stateOrProvincesQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                      </Group>
                      <Group
                        alignItems='center'
                      >
                        <StyleControl
                          maxWidth={ 400 }
                        >
                          <FormField
                            editorFor='physicalAddress.city'
                            indicateRequired={ true }
                            label='City/Town'
                          >
                            <TextInput
                              value={ companyEntity?.physicalAddress?.city }
                              onChange={ (value) => {
                                let newObj = JSON.parse(JSON.stringify(companyEntity));
                                newObj.companyEntity.physicalAddress.city = value;
                                onChange(newObj);
                              } }
                            />
                          </FormField>
                        </StyleControl>
                        <StyleControl
                          maxWidth={ 150 }
                        >
                          <FormField
                            editorFor='physicalAddress.postalCode'
                            label='Zip or Postal Code'
                          >
                            <TextInput
                              value={ companyEntity?.physicalAddress?.postalCode }
                              onChange={ (value) => {
                                let newObj = JSON.parse(JSON.stringify(companyEntity));
                                newObj.companyEntity.physicalAddress.postalCode = value;
                                onChange(newObj);
                              } }
                            />
                          </FormField>
                        </StyleControl>
                      </Group>
                    </VerticalStackPanel>
                  </StyleControl>
                </VerticalStackPanel>
              ,
            },
            {
              id: 1,
              label: 'Tax Information',
              displayFunc: () =>
                <VerticalStackPanel>
                  <FormField
                    editorFor='usFccNumber'
                    label='US FCC Number'
                  >
                    <TextInput
                      value={ companyEntity?.usFccNumber }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, usFccNumber: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='eoriNumber'
                    label='EORI Number (EU Countries / UK)'
                  >
                    <TextInput
                      value={ companyEntity?.eoriNumber }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, eoriNumber: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='usciNumber'
                    label='USCI Number (China)'
                  >
                    <TextInput
                      value={ companyEntity?.usciNumber }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, usciNumber: value })
                      } }
                    />
                  </FormField>
                  <MultiStacker
                    items={ companyEntity?.vatNumbers }
                    onChange={ (value) => {
                      // $FlowExpectedError
                      onChange({ ...companyEntity, vatNumbers: value })
                    } }
                    itemDisplayFunc={ (data, onChange) => (
                      <Group
                        alignItems='center'
                      >
                        <FormField
                          editorFor='countryRegion'
                          indicateRequired={ true }
                          label='Country / Region'
                        >
                          <AssociationEditor
                            id={ data?.countryRegion?.id }
                            onChange={ (value) => {
                              // $FlowExpectedError
                              onChange({ ...data, countryRegion: value == null ? null : { id: value } })
                            } }
                            isNullable={ false }
                            query={ countriesQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                        <FormField
                          editorFor='number'
                          indicateRequired={ true }
                          label='Number'
                        >
                          <TextInput
                            value={ data?.number }
                            onChange={ (value) => {
                              // $FlowExpectedError
                              onChange({ ...data, number: value })
                            } }
                          />
                        </FormField>
                      </Group>
                    ) }
                    addItemLabel='Add Country'
                    addNewItem={ createDefaultVatNumber }
                  />
                </VerticalStackPanel>
              ,
            },
            {
              id: 2,
              label: 'Identifiers',
              displayFunc: () =>
                <VerticalStackPanel>
                  <FormField
                    editorFor='agentIataCode'
                    label='Agent IATA Code'
                  >
                    <TextInput
                      value={ companyEntity?.agentIataCode }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, agentIataCode: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='hkRaNumber'
                    label='HK RA Number'
                  >
                    <TextInput
                      value={ companyEntity?.hkRaNumber }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, hkRaNumber: value })
                      } }
                    />
                  </FormField>
                  <Text
                    scale='title'
                    weight='bold'
                    children='HK Security Program Status'
                  />
                  <FormField
                    editorFor='hkspFlexport'
                    label='Flexport'
                  >
                    <RadioGroup
                      value={ companyEntity?.hkspFlexport }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, hkspFlexport: value })
                      } }
                      options={ HkspFlexportEnumPairs }
                    />
                  </FormField>
                  <Group
                    alignItems='center'
                  >
                    <FormField
                      editorFor='hkspKnownConsignorNumber'
                      label='Known Consignor Number'
                    >
                      <TextInput
                        value={ companyEntity?.hkspKnownConsignorNumber }
                        onChange={ (value) => {
                          // $FlowExpectedError
                          onChange({ ...companyEntity, hkspKnownConsignorNumber: value })
                        } }
                      />
                    </FormField>
                    <FormField
                      editorFor='hkspStatusExpirationDate'
                      label='Status Expiration Date'
                    >
                      <CalendarDateInput
                        value={ companyEntity?.hkspStatusExpirationDate }
                        onChange={ (value) => {
                          // $FlowExpectedError
                          onChange({ ...companyEntity, hkspStatusExpirationDate: value })
                        } }
                      />
                    </FormField>
                    <FormField
                      editorFor='hkspKcResponsiblePerson'
                      label='KC Responsible Person'
                    >
                      <TextInput
                        value={ companyEntity?.hkspKcResponsiblePerson }
                        onChange={ (value) => {
                          // $FlowExpectedError
                          onChange({ ...companyEntity, hkspKcResponsiblePerson: value })
                        } }
                      />
                    </FormField>
                  </Group>
                  <TextDisplay
                    value='Partners'
                  />
                  <MultiStacker
                    items={ companyEntity?.hkspPartners }
                    onChange={ (value) => {
                      // $FlowExpectedError
                      onChange({ ...companyEntity, hkspPartners: value })
                    } }
                    itemDisplayFunc={ (data, onChange) => (
                      <Group
                        alignItems='center'
                      >
                        <FormField
                          editorFor='partner'
                          indicateRequired={ true }
                          label='Partner'
                        >
                          <AssociationEditor
                            id={ data?.partner?.id }
                            onChange={ (value) => {
                              // $FlowExpectedError
                              onChange({ ...data, partner: value == null ? null : { id: value } })
                            } }
                            isNullable={ false }
                            query={ hkspPartnersQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                        <FormField
                          editorFor='kcNumber'
                          indicateRequired={ true }
                          label='KC Number'
                        >
                          <TextInput
                            value={ data?.kcNumber }
                            onChange={ (value) => {
                              // $FlowExpectedError
                              onChange({ ...data, kcNumber: value })
                            } }
                          />
                        </FormField>
                        <FormField
                          editorFor='expirationDate'
                          indicateRequired={ true }
                          label='Expiration Date'
                        >
                          <CalendarDateInput
                            value={ data?.expirationDate }
                            onChange={ (value) => {
                              // $FlowExpectedError
                              onChange({ ...data, expirationDate: value })
                            } }
                          />
                        </FormField>
                      </Group>
                    ) }
                    addNewItem={ createDefaultHkspPartnerUse }
                  />
                </VerticalStackPanel>
              ,
            },
            {
              id: 3,
              label: 'Compliance',
              displayFunc: () =>
                <VerticalStackPanel>
                  <TextDisplay
                    value='Wants to use Flexport Service:'
                  />
                </VerticalStackPanel>
              ,
            },
            {
              id: 4,
              label: 'Billing',
              displayFunc: () =>
                <VerticalStackPanel>
                  <FormField
                    editorFor='netsuiteVendorId'
                    label='Netsuite Vendor Id'
                  >
                    <AssociationEditor
                      id={ companyEntity?.netsuiteVendorId?.id }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, netsuiteVendorId: value == null ? null : { id: value } })
                      } }
                      isNullable={ true }
                      query={ netsuiteVendorsQuery }
                      toString={ x => x.toStringRepresentation }
                    />
                  </FormField>
                  <FormField
                    editorFor='vendorCategory'
                    label='Vendor Category'
                  >
                    <SelectInput
                      value={ companyEntity?.vendorCategory }
                      onChange={ (value) => {
                        // $FlowExpectedError
                        onChange({ ...companyEntity, vendorCategory: value })
                      } }
                      options={ VendorCategoryEnumPairs }
                    />
                  </FormField>
                </VerticalStackPanel>
              ,
            },
          ]
        }
      />
      <Separator/>
      <Group
        justifyContent='space-between'
      >
        <FormErrorDisplay/>
        <Group
          alignItems='center'
        >
          <CancelDialogButton/>
          <FormSubmitButton
            mutation={ mutation }
            variables={ companyEntity }
            label='Save'
          />
        </Group>
      </Group>
    </FormProvider>
  );
}

type StatefulProps = {|
  +companyEntity: CompanyEntity,
|};
export function CompanyEntityFormStateful(props: StatefulProps): React.Node {
  const companyEntity = relayToInternal(props.companyEntity);
  const [editedCompanyEntity, setEditedCompanyEntity] = React.useState(companyEntity);
  return <CompanyEntityForm
    companyEntity={ editedCompanyEntity }
    onChange={ setEditedCompanyEntity }
  />
}

function relayToInternal(relay: any): CompanyEntity {
  return {
    ...relay,
    physicalAddress: relay.physicalAddress || createDefaultAddress(),
  };
}

const mutation = graphql`
  mutation CompanyEntityFormMutation(
    $companyEntity: CompanyEntityInput!
  ) {
    createOrUpdateCompanyEntity(
      companyEntity: $companyEntity
    )
  }
`;

// $FlowExpectedError
export default createFragmentContainer(CompanyEntityFormStateful, {
  companyEntity: graphql`
    fragment CompanyEntityForm_companyEntity on CompanyEntity {
      id
      agentIataCode
      companyType
      countryOfBusinessRegistration {
        id
        toStringRepresentation
      }
      doingBusinessAs
      eoriNumber
      hkRaNumber
      hkspFlexport
      hkspKcResponsiblePerson
      hkspKnownConsignorNumber
      hkspPartners {
        id
        expirationDate
        kcNumber
        partner {
          id
          toStringRepresentation
        }
      }
      hkspStatusExpirationDate
      legalName
      mailingAddress {
        id
        city
        country {
          id
          toStringRepresentation
        }
        postalCode
        stateOrProvince {
          id
          toStringRepresentation
        }
        theAddress
        theAddress2
      }
      mailingAddressIsPhysicalAddress
      netsuiteVendorId {
        id
        toStringRepresentation
      }
      physicalAddress {
        id
        city
        country {
          id
          toStringRepresentation
        }
        postalCode
        stateOrProvince {
          id
          toStringRepresentation
        }
        theAddress
        theAddress2
      }
      stateOfBusinessRegistration
      usciNumber
      usFccNumber
      usTaxId
      vatNumbers {
        id
        countryRegion {
          id
          toStringRepresentation
        }
        number
      }
      vendorCategory
    }
  `,
});

const countriesQuery = graphql`
  query CompanyEntityForm_countriesQuery {
    entities: countries {
      id
      toStringRepresentation
    }
  }
`;

const hkspPartnersQuery = graphql`
  query CompanyEntityForm_hkspPartnersQuery {
    entities: hkspPartners {
      id
      toStringRepresentation
    }
  }
`;

const netsuiteVendorsQuery = graphql`
  query CompanyEntityForm_netsuiteVendorsQuery {
    entities: netsuiteVendors {
      id
      toStringRepresentation
    }
  }
`;

const stateOrProvincesQuery = graphql`
  query CompanyEntityForm_stateOrProvincesQuery {
    entities: stateOrProvinces {
      id
      toStringRepresentation
    }
  }
`;

