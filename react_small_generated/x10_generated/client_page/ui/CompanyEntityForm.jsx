// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import Checkbox from 'latitude/Checkbox';
import Group from 'latitude/Group';
import SelectInput from 'latitude/select/SelectInput';

import TextDisplay from 'react_lib/display/TextDisplay';
import FormErrorDisplay from 'react_lib/form/FormErrorDisplay';
import FormField from 'react_lib/form/FormField';
import FormProvider from 'react_lib/form/FormProvider';
import FormSubmitButton from 'react_lib/form/FormSubmitButton';
import TextInput from 'react_lib/latitude_wrappers/TextInput';
import AssociationEditor from 'react_lib/multi/AssociationEditor';
import basicCommitMutation from 'react_lib/relay/basicCommitMutation';
import Separator from 'react_lib/Separator';
import TabbedPane from 'react_lib/tab/TabbedPane';
import VisibilityControl from 'react_lib/VisibilityControl';

import { createDefaultAddress } from 'client_page/entities/Address';
import { companyEntityApplicableWhenForPhysicalAddress, companyEntityCalculateErrors, CompanyEntityTypeEnumPairs, VendorCategoryEnumPairs, type CompanyEntity } from 'client_page/entities/CompanyEntity';
import { createDefaultCtpatReview } from 'client_page/entities/CtpatReview';



type Props = {|
  +companyEntity: CompanyEntity,
  +onChange: (companyEntity: CompanyEntity) => void,
|};
function CompanyEntityForm(props: Props): React.Node {
  const { companyEntity, onChange } = props;

  return (
    <FormProvider
      value={ { errors: companyEntityCalculateErrors(companyEntity) } }
    >
      <FormField
        editorFor='legalName'
        label='Legal Name'
      >
        <TextInput
          value={ companyEntity.legalName }
          onChange={ (value) => {
            onChange({ ...companyEntity, legalName: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='doingBusinessAs'
        label='Doing Business As'
      >
        <TextInput
          value={ companyEntity.doingBusinessAs }
          onChange={ (value) => {
            onChange({ ...companyEntity, doingBusinessAs: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='companyType'
        label='Type of Business'
      >
        <SelectInput
          value={ companyEntity.companyType }
          onChange={ (value) => {
            onChange({ ...companyEntity, companyType: value })
          } }
          options={ CompanyEntityTypeEnumPairs }
        />
      </FormField>
      <FormField
        editorFor='countryOfBusinessRegistration'
        label='Country / Region of Business Registration'
      >
        <AssociationEditor
          id={ companyEntity.countryOfBusinessRegistration?.id }
          onChange={ (value) => {
            onChange({ ...companyEntity, countryOfBusinessRegistration: value == null ? null : { id: value } })
          } }
          isNullable={ true }
          query={ countriesQuery }
          toString={ x => x.toStringRepresentation }
        />
      </FormField>
      <FormField
        editorFor='stateOfBusinessRegistration'
        label='State / Region of Business Registration'
      >
        <TextInput
          value={ companyEntity.stateOfBusinessRegistration }
          onChange={ (value) => {
            onChange({ ...companyEntity, stateOfBusinessRegistration: value })
          } }
        />
      </FormField>
      <FormField
        editorFor='usTaxId'
        toolTip='Tax Id can be one of the following...'
        label='US Tax Id'
      >
        <TextInput
          value={ companyEntity.usTaxId }
          onChange={ (value) => {
            onChange({ ...companyEntity, usTaxId: value })
          } }
        />
      </FormField>
      <TabbedPane
        tabs={
          [
            {
              id: 'Address',
              label: 'Address',
              displayFunc: () =>
                <Group
                  flexDirection='column'
                >
                  <Group
                    flexDirection='column'
                  >
                    <TextDisplay
                      value='Mailing Address'
                    />
                    <Separator/>
                    <FormField
                      editorFor='mailingAddress.theAddress'
                      label='Address'
                    >
                      <TextInput
                        value={ companyEntity.mailingAddress.theAddress }
                        onChange={ (value) => {
                          let newObj = JSON.parse(JSON.stringify(companyEntity));
                          newObj.mailingAddress.theAddress = value;
                          onChange(newObj);
                        } }
                      />
                    </FormField>
                    <FormField
                      editorFor='mailingAddress.theAddress2'
                      label='Address 2'
                    >
                      <TextInput
                        value={ companyEntity.mailingAddress.theAddress2 }
                        onChange={ (value) => {
                          let newObj = JSON.parse(JSON.stringify(companyEntity));
                          newObj.mailingAddress.theAddress2 = value;
                          onChange(newObj);
                        } }
                      />
                    </FormField>
                    <Group>
                      <FormField
                        editorFor='mailingAddress.country'
                        label='Country/Region'
                      >
                        <AssociationEditor
                          id={ companyEntity.mailingAddress.country?.id }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.mailingAddress.country = value == null ? null : { id: value };
                            onChange(newObj);
                          } }
                          isNullable={ false }
                          query={ countriesQuery }
                          toString={ x => x.toStringRepresentation }
                        />
                      </FormField>
                      <FormField
                        editorFor='mailingAddress.stateOrProvince'
                        label='State Or Province'
                      >
                        <AssociationEditor
                          id={ companyEntity.mailingAddress.stateOrProvince?.id }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.mailingAddress.stateOrProvince = value == null ? null : { id: value };
                            onChange(newObj);
                          } }
                          isNullable={ false }
                          query={ stateOrProvincesQuery }
                          toString={ x => x.toStringRepresentation }
                        />
                      </FormField>
                    </Group>
                    <Group>
                      <FormField
                        editorFor='mailingAddress.city'
                        label='City/Town'
                        maxWidth={ 400 }
                      >
                        <TextInput
                          value={ companyEntity.mailingAddress.city }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.mailingAddress.city = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                      <FormField
                        editorFor='mailingAddress.postalCode'
                        label='Zip or Postal Code'
                        maxWidth={ 150 }
                      >
                        <TextInput
                          value={ companyEntity.mailingAddress.postalCode }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.mailingAddress.postalCode = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                    </Group>
                  </Group>
                  <Checkbox
                    checked={ companyEntity.mailingAddressIsPhysicalAddress }
                    onChange={ (value) => {
                      onChange({ ...companyEntity, mailingAddressIsPhysicalAddress: value })
                    } }
                    label='Mailing Address is Physical Address'
                  />
                  <VisibilityControl
                    visible={ companyEntityApplicableWhenForPhysicalAddress(companyEntity) }
                  >
                    <Group
                      flexDirection='column'
                    >
                      <TextDisplay
                        value='Physical Address'
                      />
                      <Separator/>
                      <FormField
                        editorFor='physicalAddress.theAddress'
                        label='Address'
                      >
                        <TextInput
                          value={ companyEntity.physicalAddress.theAddress }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.physicalAddress.theAddress = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                      <FormField
                        editorFor='physicalAddress.theAddress2'
                        label='Address 2'
                      >
                        <TextInput
                          value={ companyEntity.physicalAddress.theAddress2 }
                          onChange={ (value) => {
                            let newObj = JSON.parse(JSON.stringify(companyEntity));
                            newObj.physicalAddress.theAddress2 = value;
                            onChange(newObj);
                          } }
                        />
                      </FormField>
                      <Group>
                        <FormField
                          editorFor='physicalAddress.country'
                          label='Country/Region'
                        >
                          <AssociationEditor
                            id={ companyEntity.physicalAddress.country?.id }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.physicalAddress.country = value == null ? null : { id: value };
                              onChange(newObj);
                            } }
                            isNullable={ false }
                            query={ countriesQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                        <FormField
                          editorFor='physicalAddress.stateOrProvince'
                          label='State Or Province'
                        >
                          <AssociationEditor
                            id={ companyEntity.physicalAddress.stateOrProvince?.id }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.physicalAddress.stateOrProvince = value == null ? null : { id: value };
                              onChange(newObj);
                            } }
                            isNullable={ false }
                            query={ stateOrProvincesQuery }
                            toString={ x => x.toStringRepresentation }
                          />
                        </FormField>
                      </Group>
                      <Group>
                        <FormField
                          editorFor='physicalAddress.city'
                          label='City/Town'
                          maxWidth={ 400 }
                        >
                          <TextInput
                            value={ companyEntity.physicalAddress.city }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.physicalAddress.city = value;
                              onChange(newObj);
                            } }
                          />
                        </FormField>
                        <FormField
                          editorFor='physicalAddress.postalCode'
                          label='Zip or Postal Code'
                          maxWidth={ 150 }
                        >
                          <TextInput
                            value={ companyEntity.physicalAddress.postalCode }
                            onChange={ (value) => {
                              let newObj = JSON.parse(JSON.stringify(companyEntity));
                              newObj.physicalAddress.postalCode = value;
                              onChange(newObj);
                            } }
                          />
                        </FormField>
                      </Group>
                    </Group>
                  </VisibilityControl>
                </Group>
              ,
            },
            {
              id: 'Tax Information',
              label: 'Tax Information',
              displayFunc: () =>
                <Group
                  flexDirection='column'
                >
                  <FormField
                    editorFor='usFccNumber'
                    label='US FCC Number'
                  >
                    <TextInput
                      value={ companyEntity.usFccNumber }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, usFccNumber: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='eoriNumber'
                    label='EORI Number (EU Countries / UK)'
                  >
                    <TextInput
                      value={ companyEntity.eoriNumber }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, eoriNumber: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='usciNumber'
                    label='USCI Number (China)'
                  >
                    <TextInput
                      value={ companyEntity.usciNumber }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, usciNumber: value })
                      } }
                    />
                  </FormField>
                </Group>
              ,
            },
            {
              id: 'Identifiers',
              label: 'Identifiers',
              displayFunc: () =>
                <Group
                  flexDirection='column'
                >
                  <FormField
                    editorFor='agentIataCode'
                    label='Agent IATA Code'
                  >
                    <TextInput
                      value={ companyEntity.agentIataCode }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, agentIataCode: value })
                      } }
                    />
                  </FormField>
                  <FormField
                    editorFor='hkRaNumber'
                    label='HK RA Number'
                  >
                    <TextInput
                      value={ companyEntity.hkRaNumber }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, hkRaNumber: value })
                      } }
                    />
                  </FormField>
                </Group>
              ,
            },
            {
              id: 'Compliance',
              label: 'Compliance',
              displayFunc: () =>
                <Group
                  flexDirection='column'
                >
                  <TextDisplay
                    value='Wants to use Flexport Service:'
                  />
                </Group>
              ,
            },
            {
              id: 'Billing',
              label: 'Billing',
              displayFunc: () =>
                <Group
                  flexDirection='column'
                >
                  <FormField
                    editorFor='vendorCategory'
                    label='Vendor Category'
                  >
                    <SelectInput
                      value={ companyEntity.vendorCategory }
                      onChange={ (value) => {
                        onChange({ ...companyEntity, vendorCategory: value })
                      } }
                      options={ VendorCategoryEnumPairs }
                    />
                  </FormField>
                </Group>
              ,
            },
          ]
        }
      />
      <Separator/>
      <Group
        justifyContent='space-between'
      >
        <FormErrorDisplay/>
        <FormSubmitButton
          onClick={ () => save(companyEntity) }
        />
      </Group>
    </FormProvider>
  );
}

type StatefulProps = {|
  +companyEntity: CompanyEntity,
|};
export function CompanyEntityFormStateful(props: StatefulProps): React.Node {
  const companyEntity = relayToInternal(props.companyEntity);
  const [editedCompanyEntity, setEditedCompanyEntity] = React.useState(companyEntity);
  return <CompanyEntityForm
    companyEntity={ editedCompanyEntity }
    onChange={ setEditedCompanyEntity }
  />
}

function relayToInternal(relay: any): CompanyEntity {
  return {
    ...relay,
    physicalAddress: relay.physicalAddress || createDefaultAddress(),
    ctpatReview: relay.ctpatReview || createDefaultCtpatReview(),
  };
}

function save(companyEntity: CompanyEntity) {
  basicCommitMutation(mutation, { companyEntity });
}

const mutation = graphql`
  mutation CompanyEntityFormMutation(
    $companyEntity: CompanyEntityInput!
  ) {
    createOrUpdateCompanyEntity(
      companyEntity: $companyEntity
    )
  }
`;

// $FlowExpectedError
export default createFragmentContainer(CompanyEntityFormStateful, {
  companyEntity: graphql`
    fragment CompanyEntityForm_companyEntity on CompanyEntity {
      id
      agentIataCode
      companyType
      countryOfBusinessRegistration {
        id
        toStringRepresentation
      }
      doingBusinessAs
      eoriNumber
      hkRaNumber
      legalName
      mailingAddress {
        id
        city
        country {
          id
          toStringRepresentation
        }
        postalCode
        stateOrProvince {
          id
          toStringRepresentation
        }
        theAddress
        theAddress2
      }
      mailingAddressIsPhysicalAddress
      physicalAddress {
        id
        city
        country {
          id
          toStringRepresentation
        }
        postalCode
        stateOrProvince {
          id
          toStringRepresentation
        }
        theAddress
        theAddress2
      }
      stateOfBusinessRegistration
      usciNumber
      usFccNumber
      usTaxId
      vendorCategory
    }
  `,
});

const countriesQuery = graphql`
  query CompanyEntityForm_countriesQuery {
    entities: countries {
      id
      toStringRepresentation
    }
  }
`;

const stateOrProvincesQuery = graphql`
  query CompanyEntityForm_stateOrProvincesQuery {
    entities: stateOrProvinces {
      id
      toStringRepresentation
    }
  }
`;

