// This file was auto-generated by x10. Do not modify by hand.
// @flow


import { v4 as uuid } from 'uuid';

import { addError, type FormError } from 'react_lib/form/FormProvider';
import isBlank from 'react_lib/utils/isBlank';

import { companyCalculateErrors, createDefaultCompany, type Company } from 'client_page/entities/Company';
import { contactCalculateErrors, createDefaultContact, type Contact } from 'client_page/entities/Contact';


// Type Definition
export type Client = {
  +id: string,
  +salesforceAccountRef: string,
  +referredBy: string,
  +status: ?ClientStatusEnum,
  +segment: ?ClientSegmentEnum,
  +purchasingBehavior: ?ClientPurchasingBehaviorEnum,
  +primaryShipmentRole: ?ClientPrimaryShipmentRoleEnum,
  +shipmentsAsClient: ?number,
  +shipmentsAsShipper: ?number,
  +shipmentsAsConsignee: ?number,
  +company: Company,
  +primaryContact: Contact,
};


// Enums
export const ClientStatusEnumPairs = [
  {
    value: 'lead',
    label: 'Lead',
  },
  {
    value: 'test',
    label: 'Test',
  },
  {
    value: 'demo',
    label: 'Demo',
  },
  {
    value: 'active',
    label: 'Active',
  },
  {
    value: 'churned',
    label: 'Churned',
  },
  {
    value: 'deactivated',
    label: 'Deactivated',
  },
];

export type ClientStatusEnum = 'lead' | 'test' | 'demo' | 'active' | 'churned' | 'deactivated';

export const ClientSegmentEnumPairs = [
  {
    value: 'emerging',
    label: 'Emerging',
  },
  {
    value: 'smb',
    label: 'Smb',
  },
  {
    value: 'mid_market',
    label: 'Mid Market',
  },
  {
    value: 'not_qualified',
    label: 'Not Qualified',
  },
  {
    value: 'unknown',
    label: 'Unknown',
  },
  {
    value: 'enterprise',
    label: 'Enterprise',
  },
];

export type ClientSegmentEnum = 'emerging' | 'smb' | 'mid_market' | 'not_qualified' | 'unknown' | 'enterprise';

export const ClientPurchasingBehaviorEnumPairs = [
  {
    value: 'price',
    label: 'Price',
  },
  {
    value: 'value',
    label: 'Value',
  },
];

export type ClientPurchasingBehaviorEnum = 'price' | 'value';

export const ClientPrimaryShipmentRoleEnumPairs = [
  {
    value: 'unknown',
    label: 'Unknown',
  },
  {
    value: 'shipper',
    label: 'Shipper',
  },
  {
    value: 'consignee',
    label: 'Consignee',
  },
];

export type ClientPrimaryShipmentRoleEnum = 'unknown' | 'shipper' | 'consignee';



// Create Default Function
export function createDefaultClient(): Client {
  return {
    id: uuid(),
    salesforceAccountRef: '',
    referredBy: '',
    // $FlowExpectedError Required field, but no default value
    status: null,
    // $FlowExpectedError Required field, but no default value
    segment: null,
    purchasingBehavior: null,
    // $FlowExpectedError Required field, but no default value
    primaryShipmentRole: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsClient: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsShipper: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsConsignee: null,
    company: createDefaultCompany(),
    primaryContact: createDefaultContact(),
  };
}


// Validations
export function clientCalculateErrors(client: Client, prefix?: string): $ReadOnlyArray<FormError> {
  const errors = [];
  if (client == null ) return errors;

  if (isBlank(client.status))
    addError(errors, prefix, 'Status is required', ['status']);
  if (isBlank(client.segment))
    addError(errors, prefix, 'Segment is required', ['segment']);
  if (isBlank(client.primaryShipmentRole))
    addError(errors, prefix, 'Primary Shipment Role is required', ['primaryShipmentRole']);

  errors.push(...companyCalculateErrors(client.company, 'company'));
  errors.push(...contactCalculateErrors(client.primaryContact, 'primaryContact'));

  return errors;
}

