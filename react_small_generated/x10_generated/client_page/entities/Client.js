// This file was auto-generated by x10. Do not modify by hand.
// @flow


import { v4 as uuid } from 'uuid';

import { addError, type FormError } from 'react_lib/form/FormProvider';
import isBlank from 'react_lib/utils/isBlank';

import { companyCalculateErrors, createDefaultCompany, type Company } from 'client_page/entities/Company';
import { contactCalculateErrors, createDefaultContact, type Contact } from 'client_page/entities/Contact';


// Type Definition
export type Client = {
  +id: string,
  +salesforceAccountRef: string,
  +referredBy: string,
  +status: ?ClientStatusEnum,
  +segment: ?ClientSegmentEnum,
  +purchasingBehavior: ?ClientPurchasingBehaviorEnum,
  +primaryShipmentRole: ?ClientPrimaryShipmentRoleEnum,
  +shipmentsAsClient: ?number,
  +shipmentsAsShipper: ?number,
  +shipmentsAsConsignee: ?number,
  +company: Company,
  +primaryContact: Contact,
};


// Enums
export const ClientStatusEnumPairs = [
  {
    value: 'LEAD',
    label: 'Lead',
  },
  {
    value: 'TEST',
    label: 'Test',
  },
  {
    value: 'DEMO',
    label: 'Demo',
  },
  {
    value: 'ACTIVE',
    label: 'Active',
  },
  {
    value: 'CHURNED',
    label: 'Churned',
  },
  {
    value: 'DEACTIVATED',
    label: 'Deactivated',
  },
];

export type ClientStatusEnum = 'LEAD' | 'TEST' | 'DEMO' | 'ACTIVE' | 'CHURNED' | 'DEACTIVATED';

export const ClientSegmentEnumPairs = [
  {
    value: 'EMERGING',
    label: 'Emerging',
  },
  {
    value: 'SMB',
    label: 'Smb',
  },
  {
    value: 'MID_MARKET',
    label: 'Mid Market',
  },
  {
    value: 'NOT_QUALIFIED',
    label: 'Not Qualified',
  },
  {
    value: 'UNKNOWN',
    label: 'Unknown',
  },
  {
    value: 'ENTERPRISE',
    label: 'Enterprise',
  },
];

export type ClientSegmentEnum = 'EMERGING' | 'SMB' | 'MID_MARKET' | 'NOT_QUALIFIED' | 'UNKNOWN' | 'ENTERPRISE';

export const ClientPurchasingBehaviorEnumPairs = [
  {
    value: 'PRICE',
    label: 'Price',
  },
  {
    value: 'VALUE',
    label: 'Value',
  },
];

export type ClientPurchasingBehaviorEnum = 'PRICE' | 'VALUE';

export const ClientPrimaryShipmentRoleEnumPairs = [
  {
    value: 'UNKNOWN',
    label: 'Unknown',
  },
  {
    value: 'SHIPPER',
    label: 'Shipper',
  },
  {
    value: 'CONSIGNEE',
    label: 'Consignee',
  },
];

export type ClientPrimaryShipmentRoleEnum = 'UNKNOWN' | 'SHIPPER' | 'CONSIGNEE';



// Create Default Function
export function createDefaultClient(): Client {
  return {
    id: uuid(),
    salesforceAccountRef: '',
    referredBy: '',
    // $FlowExpectedError Required field, but no default value
    status: null,
    // $FlowExpectedError Required field, but no default value
    segment: null,
    purchasingBehavior: null,
    // $FlowExpectedError Required field, but no default value
    primaryShipmentRole: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsClient: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsShipper: null,
    // $FlowExpectedError Required field, but no default value
    shipmentsAsConsignee: null,
    company: createDefaultCompany(),
    primaryContact: createDefaultContact(),
  };
}


// Validations
export function clientCalculateErrors(client: Client, prefix?: string): $ReadOnlyArray<FormError> {
  const errors = [];
  if (client == null ) return errors;

  if (isBlank(client.status))
    addError(errors, prefix, 'Status is required', ['status']);
  if (isBlank(client.segment))
    addError(errors, prefix, 'Segment is required', ['segment']);
  if (isBlank(client.primaryShipmentRole))
    addError(errors, prefix, 'Primary Shipment Role is required', ['primaryShipmentRole']);

  errors.push(...companyCalculateErrors(client.company, 'company'));
  errors.push(...contactCalculateErrors(client.primaryContact, 'primaryContact'));

  return errors;
}

