// This file was auto-generated by x10. Do not modify by hand.
// @flow


import { v4 as uuid } from 'uuid';

import { addError, type FormError } from 'react_lib/form/FormProvider';
import isBlank from 'react_lib/utils/isBlank';

import { addressCalculateErrors, createDefaultAddress, type Address } from 'client_page/entities/Address';
import { createDefaultCtpatReview, ctpatReviewCalculateErrors, type CtpatReview } from 'client_page/entities/CtpatReview';
import { type Document } from 'client_page/entities/Document';
import { type HkspPartnerUse } from 'client_page/entities/HkspPartnerUse';
import { type VatNumber } from 'client_page/entities/VatNumber';


// Type Definition
export type CompanyEntity = {
  +id: string,
  +legalName: string,
  +doingBusinessAs: string,
  +coreId: ?number,
  +companyType: ?CompanyEntityTypeEnum,
  +stateOfBusinessRegistration: string,
  +usTaxId: string,
  +isPrimary: boolean,
  +dgDisclaimerAgreed: boolean,
  +mailingAddressIsPhysicalAddress: boolean,
  +brBlCompanyName: string,
  +isArchived: boolean,
  +brBlRegistrationNumber: string,
  +brBlAddress: string,
  +brBlLegalRepChinese: string,
  +brBlLegalRepPinyin: string,
  +usFccNumber: string,
  +eoriNumber: string,
  +usciNumber: string,
  +agentIataCode: string,
  +hkRaNumber: string,
  +hkspFlexport: ?HkspFlexportEnum,
  +hkspKnownConsignorNumber: string,
  +hkspStatusExpirationDate: ?string,
  +hkspKcResponsiblePerson: string,
  +vendorCategory: ?VendorCategoryEnum,
  +mailingAddress: Address,
  +physicalAddress: Address,
  +vatNumbers: $ReadOnlyArray<VatNumber>,
  +netsuiteVendorId: ?{ id: string },
  +ctpatReview: CtpatReview,
  +documents: $ReadOnlyArray<Document>,
  +countryOfBusinessRegistration: ?{ id: string },
  +invoiceCurrencyDefault: ?{ id: string },
  +hkspPartners: $ReadOnlyArray<HkspPartnerUse>,
};


// Enums
export const CompanyEntityTypeEnumPairs = [
  {
    value: 'CORPORATION',
    label: 'Corporation',
  },
  {
    value: 'INDIVIDUAL',
    label: 'Individual',
  },
  {
    value: 'LIMITED_LIABILITY_COMPANY',
    label: 'Limited Liability Company',
  },
  {
    value: 'LIMITED_LIABILITY_PARTNERSHIP',
    label: 'Limited Liability Partnership',
  },
  {
    value: 'NON_RESIDENT_CORPORATION',
    label: 'Non Resident Corporation',
  },
  {
    value: 'PARTNERSHIP',
    label: 'Partnership',
  },
  {
    value: 'SOLE_PROPRIETORSHIP',
    label: 'Sole Proprietorship',
  },
  {
    value: 'UNKNOWN',
    label: 'Unknown',
  },
  {
    value: 'UNLIMITED_LIABILITY_CORPORATION',
    label: 'Unlimited Liability Corporation',
  },
];

export type CompanyEntityTypeEnum = 'CORPORATION' | 'INDIVIDUAL' | 'LIMITED_LIABILITY_COMPANY' | 'LIMITED_LIABILITY_PARTNERSHIP' | 'NON_RESIDENT_CORPORATION' | 'PARTNERSHIP' | 'SOLE_PROPRIETORSHIP' | 'UNKNOWN' | 'UNLIMITED_LIABILITY_CORPORATION';

export const VendorCategoryEnumPairs = [
  {
    value: 'UNASSIGNED',
    label: 'Unassigned',
  },
  {
    value: 'FREIGHT_UNAPPROVED',
    label: 'Freight - Unapproved',
  },
  {
    value: 'FREIGHT_APPROVED',
    label: 'Freight - Approved',
  },
  {
    value: 'ARRIVAL_NOTICE',
    label: 'Arrival Notice',
  },
  {
    value: 'ARRIVAL_NOTICE_TERMS',
    label: 'Arrival Notice Terms',
  },
  {
    value: 'PASSTHROUGH_APPROVED',
    label: 'Passthrough Approved',
  },
];

export type VendorCategoryEnum = 'UNASSIGNED' | 'FREIGHT_UNAPPROVED' | 'FREIGHT_APPROVED' | 'ARRIVAL_NOTICE' | 'ARRIVAL_NOTICE_TERMS' | 'PASSTHROUGH_APPROVED';

export const HkspFlexportEnumPairs = [
  {
    value: 'KNOWN_CONSIGNOR',
    label: 'Known Consignor',
  },
  {
    value: 'ACCCOUNT_CONSIGNOR',
    label: 'Acccount Consignor',
  },
  {
    value: 'UNKNOWN',
    label: 'Unknown',
  },
];

export type HkspFlexportEnum = 'KNOWN_CONSIGNOR' | 'ACCCOUNT_CONSIGNOR' | 'UNKNOWN';



// Derived Attribute Functions
export function companyEntityApplicableWhenForPhysicalAddress(companyEntity: {
  +mailingAddressIsPhysicalAddress: boolean,
}): boolean {
  const result = !companyEntity?.mailingAddressIsPhysicalAddress;
  return result;
}



// Create Default Function
export function createDefaultCompanyEntity(): CompanyEntity {
  return {
    id: uuid(),
    legalName: '',
    doingBusinessAs: '',
    coreId: null,
    // $FlowExpectedError Required field, but no default value
    companyType: null,
    stateOfBusinessRegistration: '',
    usTaxId: '',
    isPrimary: false,
    dgDisclaimerAgreed: false,
    mailingAddressIsPhysicalAddress: true,
    brBlCompanyName: '',
    isArchived: false,
    brBlRegistrationNumber: '',
    brBlAddress: '',
    brBlLegalRepChinese: '',
    brBlLegalRepPinyin: '',
    usFccNumber: '',
    eoriNumber: '',
    usciNumber: '',
    agentIataCode: '',
    hkRaNumber: '',
    hkspFlexport: null,
    hkspKnownConsignorNumber: '',
    hkspStatusExpirationDate: null,
    hkspKcResponsiblePerson: '',
    vendorCategory: null,
    mailingAddress: createDefaultAddress(),
    physicalAddress: createDefaultAddress(),
    vatNumbers: [],
    netsuiteVendorId: null,
    ctpatReview: createDefaultCtpatReview(),
    documents: [],
    countryOfBusinessRegistration: null,
    invoiceCurrencyDefault: null,
    hkspPartners: [],
  };
}


// Validations
export function companyEntityCalculateErrors(companyEntity: CompanyEntity, prefix?: string): $ReadOnlyArray<FormError> {
  const errors = [];

  if (isBlank(companyEntity.legalName))
    addError(errors, prefix, 'Legal Name is required', ['legalName']);
  if (isBlank(companyEntity.companyType))
    addError(errors, prefix, 'Company Type is required', ['companyType']);

  errors.push(...addressCalculateErrors(companyEntity.mailingAddress, 'mailingAddress'));
  if (companyEntityApplicableWhenForPhysicalAddress(companyEntity))
    errors.push(...addressCalculateErrors(companyEntity.physicalAddress, 'physicalAddress'));
  errors.push(...ctpatReviewCalculateErrors(companyEntity.ctpatReview, 'ctpatReview'));

  return errors;
}

