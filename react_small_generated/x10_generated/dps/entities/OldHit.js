// This file was auto-generated by x10. Do not modify by hand.
// @flow


import { v4 as uuid } from 'uuid';

import { addError, type FormError } from 'react_lib/form/FormProvider';
import isBlank from 'react_lib/utils/isBlank';

import { type Attachment } from 'dps/entities/Attachment';
import { type HitEdit } from 'dps/entities/HitEdit';
import { type User } from 'dps/entities/User';
import { type HitStatusEnum, type ReasonForCleranceEnum } from 'dps/sharedEnums';


// Type Definition
export type OldHit = {
  +id: string,
  +status: ?HitStatusEnum,
  +reasonForClearance: ?ReasonForCleranceEnum,
  +whiteListUntil: ?string,
  +notes: string,
  +createdAt: ?string,
  +resolutionTimestamp: ?string,
  +resolvedBy: ?User,
  +changeLog: $ReadOnlyArray<HitEdit>,
  +attachments: $ReadOnlyArray<Attachment>,
};


// Create Default Function
export function createDefaultOldHit(): OldHit {
  return {
    id: uuid(),
    status: 'cleared',
    // $FlowExpectedError Required field, but no default value
    reasonForClearance: null,
    whiteListUntil: null,
    notes: '',
    createdAt: null,
    resolutionTimestamp: null,
    resolvedBy: null,
    changeLog: [],
    attachments: [],
  };
}


// Validations
export function oldHitCalculateErrors(oldHit: OldHit, prefix?: string): $ReadOnlyArray<FormError> {
  const errors = [];
  if (oldHit == null ) return errors;

  if (isBlank(oldHit.status))
    addError(errors, prefix, 'Status is required', ['status']);
  if (isBlank(oldHit.reasonForClearance))
    addError(errors, prefix, 'Reason For Clearance is required', ['reasonForClearance']);

  return errors;
}

