// This file was auto-generated by x10. Do not modify by hand.
// @flow


import { v4 as uuid } from 'uuid';

import { addError, type FormError } from 'react_lib/form/FormProvider';
import isBlank from 'react_lib/utils/isBlank';

import { type Attachment } from 'dps/entities/Attachment';
import { type CompanyEntity } from 'dps/entities/CompanyEntity';
import { type MatchInfo } from 'dps/entities/MatchInfo';
import { type Message } from 'dps/entities/Message';
import { type OldHit } from 'dps/entities/OldHit';
import { type Shipment } from 'dps/entities/Shipment';
import { type SuggestedResource } from 'dps/entities/SuggestedResource';
import { type User } from 'dps/entities/User';
import { type HitStatusEnum, type ReasonForCleranceEnum } from 'dps/sharedEnums';


// Type Definition
export type Hit = {
  +id: string,
  +priority: ?PriorityEnum,
  +status: ?HitStatusEnum,
  +reasonForClearance: ?ReasonForCleranceEnum,
  +notes: string,
  +whitelistTime: ?number,
  +companyEntity: CompanyEntity,
  +user: User,
  +attachments: $ReadOnlyArray<Attachment>,
  +matches: $ReadOnlyArray<MatchInfo>,
  +resources: $ReadOnlyArray<SuggestedResource>,
  +shipments: $ReadOnlyArray<Shipment>,
  +messages: $ReadOnlyArray<Message>,
  +oldHits: $ReadOnlyArray<OldHit>,
};


// Enums
export const PriorityEnumPairs = [
  {
    value: 'low',
    label: 'Low',
  },
  {
    value: 'middle',
    label: 'Middle',
  },
  {
    value: 'high',
    label: 'High',
  },
];

export type PriorityEnum = 'low' | 'middle' | 'high';



// Create Default Function
export function createDefaultHit(): Hit {
  return {
    id: uuid(),
    priority: null,
    status: 'unresolved',
    // $FlowExpectedError Required field, but no default value
    reasonForClearance: null,
    notes: '',
    // $FlowExpectedError Required field, but no default value
    whitelistTime: null,
    companyEntity: null,
    user: null,
    attachments: [],
    matches: [],
    resources: [],
    shipments: [],
    messages: [],
    oldHits: [],
  };
}


// Validations
export function hitCalculateErrors(hit: Hit, prefix?: string): $ReadOnlyArray<FormError> {
  const errors = [];
  if (hit == null ) return errors;

  if (isBlank(hit.reasonForClearance))
    addError(errors, prefix, 'Reason For Clearance is required', ['reasonForClearance']);
  if (isBlank(hit.notes))
    addError(errors, prefix, 'Notes is required', ['notes']);
  if (isBlank(hit.whitelistTime))
    addError(errors, prefix, 'Whitelist Time is required', ['whitelistTime']);
  if (isBlank(hit.companyEntity))
    addError(errors, prefix, 'Company Entity is required', ['companyEntity']);

  return errors;
}

