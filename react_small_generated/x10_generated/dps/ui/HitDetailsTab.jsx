// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import Group from 'latitude/Group';
import Icon from 'latitude/Icon';
import Text from 'latitude/Text';

import TextDisplay from 'react_lib/display/TextDisplay';
import Expander from 'react_lib/Expander';
import DisplayField from 'react_lib/form/DisplayField';
import DisplayForm from 'react_lib/form/DisplayForm';
import MultiStacker from 'react_lib/multi/MultiStacker';
import Separator from 'react_lib/Separator';
import x10toString from 'react_lib/utils/x10toString';

import { type Hit } from 'dps/entities/Hit';
import { createDefaultMatchInfo } from 'dps/entities/MatchInfo';
import ClearanceForm from 'dps/ui/ClearanceForm';

import { type HitDetailsTab_hit } from './__generated__/HitDetailsTab_hit.graphql';



type Props = {|
  +hit: HitDetailsTab_hit,
|};
function HitDetailsTab(props: Props): React.Node {
  const { hit } = props;

  return (
    <Group
      flexDirection='column'
    >
      <Text
        scale='headline'
        weight='bold'
        children='Match details'
      />
      <Group
        alignItems='center'
      >
        <Icon
          iconName='attention'
        />
        <Text
          scale='title'
          weight='bold'
          children={ 'Please review ' + x10toString(hit?.matches.length) + ' matches' }
        />
      </Group>
      <DisplayForm>
        <Text
          scale='title'
          weight='bold'
          children='Company information'
        />
        <Group
          alignItems='center'
        >
          <DisplayField
            label='Name'
          >
            <TextDisplay
              value={ hit?.companyEntity?.name }
            />
          </DisplayField>
          <DisplayField
            label='Address'
          >
            <TextDisplay
              value={ hit?.companyEntity?.physicalAddress?.address }
            />
          </DisplayField>
        </Group>
      </DisplayForm>
      <Separator
        orientation='vertical'
      />
      <Expander
        headerFunc={ () => (
          <Text
            scale='title'
            weight='bold'
            children='Match information'
          />
        ) }
      >
        <MultiStacker
          items={ hit?.matches }
          itemDisplayFunc={ (data, onChange) => (
            <DisplayForm>
              <Text
                scale='title'
                weight='bold'
                children='Match details'
              />
              <Group
                alignItems='center'
              >
                <DisplayField
                  label='Name'
                >
                  <TextDisplay
                    value={ data?.name }
                  />
                </DisplayField>
                <DisplayField
                  label='Address'
                >
                  <TextDisplay
                    value={ data?.address }
                  />
                </DisplayField>
                <DisplayField
                  label='Match Type'
                >
                  <TextDisplay
                    value={ data?.matchType }
                  />
                </DisplayField>
              </Group>
              <DisplayField
                label='Reason Listed'
              >
                <TextDisplay
                  value={ data?.reasonListed }
                />
              </DisplayField>
              <DisplayField
                label='Comments'
              >
                <TextDisplay
                  value={ data?.comments }
                />
              </DisplayField>
              <DisplayField
                label='Record Source'
              >
                <TextDisplay
                  value={ data?.recordSource }
                />
              </DisplayField>
            </DisplayForm>
          ) }
          addNewItem={ createDefaultMatchInfo }
        />
      </Expander>
      <Separator/>
      <Expander
        headerFunc={ () => (
          <Text
            scale='title'
            weight='bold'
            children='Clearance'
          />
        ) }
      >
        <ClearanceForm hit={ hit }/>
      </Expander>
    </Group>
  );
}

// $FlowExpectedError
export default createFragmentContainer(HitDetailsTab, {
  hit: graphql`
    fragment HitDetailsTab_hit on Hit {
      id
      companyEntity {
        id
        toStringRepresentation
        name
        physicalAddress {
          id
          address
        }
      }
      matches {
        id
        address
        comments
        matchType
        name
        reasonListed
        recordSource
      }
    }
  `,
});

