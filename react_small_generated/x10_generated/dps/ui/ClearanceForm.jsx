// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import FloatInput from 'latitude/FloatInput';
import Group from 'latitude/Group';
import SelectInput from 'latitude/select/SelectInput';
import TextareaInput from 'latitude/TextareaInput';

import TextDisplay from 'react_lib/display/TextDisplay';
import RadioGroup from 'react_lib/enum/RadioGroup';
import FormField from 'react_lib/form/FormField';
import FormProvider from 'react_lib/form/FormProvider';
import FormSubmitButton from 'react_lib/form/FormSubmitButton';
import basicCommitMutation from 'react_lib/relay/basicCommitMutation';
import VisibilityControl from 'react_lib/VisibilityControl';

import { hitCalculateErrors, type Hit } from 'dps/entities/Hit';
import { HitStatusEnumPairs, ReasonForCleranceEnumPairs } from 'dps/sharedEnums';



type Props = {|
  +hit: Hit,
  +onChange: (hit: Hit) => void,
|};
function ClearanceForm(props: Props): React.Node {
  const { hit, onChange } = props;

  return (
    <FormProvider
      value={ { errors: hitCalculateErrors(hit) } }
    >
      <Group
        alignItems='center'
        gap={ 100 }
      >
        <TextDisplay
          value='Is this a denid party?'
        />
        <RadioGroup
          value={ hit.status }
          onChange={ (value) => {
            onChange({ ...hit, status: value })
          } }
          excludeItems='unresolved'
          options={ HitStatusEnumPairs }
        />
      </Group>
      <VisibilityControl
        visible={ hit?.status != "denied" }
      >
        <Group
          alignItems='center'
          gap={ 32 }
        >
          <FormField
            editorFor='reasonForClearance'
            label='Reason For Clearance'
          >
            <SelectInput
              value={ hit.reasonForClearance }
              onChange={ (value) => {
                onChange({ ...hit, reasonForClearance: value })
              } }
              options={ ReasonForCleranceEnumPairs }
            />
          </FormField>
          <FormField
            editorFor='whitelistTime'
            label='Whitelist time'
          >
            <FloatInput
              value={ hit.whitelistTime }
              onChange={ (value) => {
                onChange({ ...hit, whitelistTime: value })
              } }
            />
          </FormField>
        </Group>
      </VisibilityControl>
      <FormField
        editorFor='notes'
        label='Notes'
      >
        <TextareaInput
          value={ hit.notes }
          onChange={ (value) => {
            onChange({ ...hit, notes: value })
          } }
          rows={ 3 }
        />
      </FormField>
      <FormSubmitButton
        onClick={ () => save(hit) }
        action={
          {
            successUrl: '/tenants',
          }
        }
      />
    </FormProvider>
  );
}

type StatefulProps = {|
  +hit: Hit,
|};
export function ClearanceFormStateful(props: StatefulProps): React.Node {
  const hit = relayToInternal(props.hit);
  const [editedHit, setEditedHit] = React.useState(hit);
  return <ClearanceForm
    hit={ editedHit }
    onChange={ setEditedHit }
  />
}

function relayToInternal(relay: any): Hit {
  return {
    ...relay,
  };
}

function save(hit: Hit) {
  basicCommitMutation(mutation, { hit });
}

const mutation = graphql`
  mutation ClearanceFormMutation(
    $hit: HitInput!
  ) {
    createOrUpdateHit(
      hit: $hit
    )
  }
`;

// $FlowExpectedError
export default createFragmentContainer(ClearanceFormStateful, {
  hit: graphql`
    fragment ClearanceForm_hit on Hit {
      id
      notes
      reasonForClearance
      status
      whitelistTime
    }
  `,
});

