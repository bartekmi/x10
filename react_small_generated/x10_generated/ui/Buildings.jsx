// This file was auto-generated by x10. Do not modify by hand.
// @flow

import { type Buildings_buildings } from './__generated__/Buildings_buildings.graphql';
import { addressSecondAddressLine } from 'entities/Address';
import { buildingAgeInYears, type Building } from 'entities/Building';
import Group from 'latitude/Group';
import HelpTooltip from 'latitude/HelpTooltip';
import Table from 'latitude/table/Table';
import TextCell from 'latitude/table/TextCell';
import Text from 'latitude/Text';
import * as React from 'react';
import Button from 'react_lib/latitude_wrappers/Button';
import TextInput from 'react_lib/latitude_wrappers/TextInput';
import isBlank from 'react_lib/utils/isBlank';
import VisibilityControl from 'react_lib/VisibilityControl';
import { createFragmentContainer, graphql } from 'react-relay';


type Props = {|
  +buildings: Buildings_buildings,
|};
function Buildings(props: Props): React.Node {
  const { buildings } = props;

  return (
    <Group
      flexDirection='column'
    >
      <Text
        scale='display'
        children='Buildings'
      />
      <div style={ { height: '500px', wdith: '100%' } }>
        <Table
          data={ buildings }
          getUniqueRowId={ row => row.id }
          columnDefinitions={
            [
              {
                id: 'Name',
                render: (data) =>
                  <Group>
                    <TextInput
                      value={ data.name }
                      onChange={ () => { } }
                      readOnly={ true }
                    />
                    <VisibilityControl
                      visible={ !isBlank(data.description) }
                    >
                      <HelpTooltip
                        text={ data.description }
                      />
                    </VisibilityControl>
                  </Group>
                ,
                header: 'Name',
                width: 200,
              },
              {
                id: 'The Address',
                render: (data) => <TextCell value={ data.physicalAddress?.theAddress } />,
                header: 'The Address',
                width: 140,
              },
              {
                id: 'City / Province',
                render: (data) => <TextCell value={ addressSecondAddressLine(data.physicalAddress) } />,
                header: 'City / Province',
                width: 140,
              },
              {
                id: 'Age In Years',
                render: (data) => <TextCell value={ buildingAgeInYears(data) } />,
                header: 'Age In Years',
                width: 140,
              },
              {
                id: 'Pet Policy',
                render: (data) => <TextCell value={ data.petPolicy } />,
                header: 'Pet Policy',
                width: 140,
              },
              {
                id: 'Action',
                render: (data) =>
                  <Group>
                    <Button
                      label='View'
                    />
                    <Button
                      label='Edit'
                      url={ '/buildings/edit/' + data.id }
                    />
                  </Group>
                ,
                header: 'Action',
                width: 140,
              },
            ]
          }
        />
      </div>
    </Group>
  );
}

// $FlowExpectedError
export default createFragmentContainer(Buildings, {
  buildings: graphql`
    fragment Buildings_buildings on Building @relay(plural: true) {
      id
      dateOfOccupancy
      description
      name
      petPolicy
      physicalAddress {
        id
        city
        stateOrProvince
        theAddress
      }
    }
  `,
});

