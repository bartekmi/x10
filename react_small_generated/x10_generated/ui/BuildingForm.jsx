// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';

import { addressSecondAddressLine } from 'entities/Address';
import { buildingAgeInYears, buildingApplicableWhenForMailingAddress, MailboxTypeEnumPairs, PetPolicyEnumPairs } from 'entities/Building';
import Checkbox from 'latitude/Checkbox';
import FloatInput from 'latitude/FloatInput';
import Group from 'latitude/Group';
import SelectInput from 'latitude/select/SelectInput';
import Text from 'latitude/Text';
import TextareaInput from 'latitude/TextareaInput';
import TextInput from 'latitude/TextInput';
import FormField from 'react_lib/form/FormField';
import FormProvider from 'react_lib/form/FormProvider';
import FormSection from 'react_lib/form/FormSection';
import FormSubmitButton from 'react_lib/form/FormSubmitButton';
import basicCommitMutation from 'react_lib/relay/basicCommitMutation';
import Separator from 'react_lib/Separator';
import VisibilityControl from 'react_lib/VisibilityControl';
import X10_CalendarDateInput from 'react_lib/X10_CalendarDateInput';
import { graphql } from 'react-relay';


import { type Building } from 'entities/Building';

type Props = {|
  +building: Building,
  +onChange: (building: Building) => void,
|};
export default function BuildingForm(props: Props): React.Node {
  const { building, onChange } = props;

  return (
    <FormProvider
      value={ [] }
    >
      <Text
        scale='display'
        children={ 'Editing Building in: ' + addressSecondAddressLine(building.physicalAddress) }
      />
      <Text
        scale='display'
        children={ buildingAgeInYears(building) }
      />
      <Separator/>
      <FormSection
        label='Building Info'
      >
        <FormField
          label='Moniker'
        >
          <TextInput
            value={ building.moniker }
            onChange={ () => { } }
            readOnly={ true }
          />
        </FormField>
        <FormField
          label='Name'
        >
          <TextInput
            value={ building.name }
            onChange={ (value) => {
              onChange({ ...building, name: value })
            } }
          />
        </FormField>
        <FormField
          label='Description'
        >
          <TextareaInput
            value={ building.description }
            onChange={ (value) => {
              onChange({ ...building, description: value })
            } }
            rows={ 3 }
          />
        </FormField>
      </FormSection>
      <FormSection
        label='Physical Address'
      >
        <FormField
          label='The Address'
        >
          <TextInput
            value={ building.physicalAddress.theAddress }
            onChange={ (value) => {
              let newObj = JSON.parse(JSON.stringify(building));
              newObj.physicalAddress.theAddress = value;
              onChange(newObj);
            } }
          />
        </FormField>
        <FormField
          label='City'
        >
          <TextInput
            value={ building.physicalAddress.city }
            onChange={ (value) => {
              let newObj = JSON.parse(JSON.stringify(building));
              newObj.physicalAddress.city = value;
              onChange(newObj);
            } }
          />
        </FormField>
        <FormField
          label='State Or Province'
        >
          <TextInput
            value={ building.physicalAddress.stateOrProvince }
            onChange={ (value) => {
              let newObj = JSON.parse(JSON.stringify(building));
              newObj.physicalAddress.stateOrProvince = value;
              onChange(newObj);
            } }
          />
        </FormField>
        <FormField
          label='Zip or Postal Code'
        >
          <TextInput
            value={ building.physicalAddress.zip }
            onChange={ (value) => {
              let newObj = JSON.parse(JSON.stringify(building));
              newObj.physicalAddress.zip = value;
              onChange(newObj);
            } }
          />
        </FormField>
      </FormSection>
      <FormSection
        label='Mailing Address'
      >
        <FormField
          label='Mailing Address is Same as Physical Address'
        >
          <Checkbox
            checked={ building.mailingAddressSameAsPhysical }
            onChange={ (value) => {
              onChange({ ...building, mailingAddressSameAsPhysical: value })
            } }
          />
        </FormField>
        <VisibilityControl
          visible={ buildingApplicableWhenForMailingAddress(building) }
        >
          <Group
            flexDirection='column'
          >
            <FormField
              label='Address or Post Office (PO) Box'
            >
              <TextInput
                value={ building.mailingAddress.theAddress }
                onChange={ (value) => {
                  let newObj = JSON.parse(JSON.stringify(building));
                  newObj.mailingAddress.theAddress = value;
                  onChange(newObj);
                } }
              />
            </FormField>
            <FormField
              label='City'
            >
              <TextInput
                value={ building.mailingAddress.city }
                onChange={ (value) => {
                  let newObj = JSON.parse(JSON.stringify(building));
                  newObj.mailingAddress.city = value;
                  onChange(newObj);
                } }
              />
            </FormField>
            <FormField
              label='State Or Province'
            >
              <TextInput
                value={ building.mailingAddress.stateOrProvince }
                onChange={ (value) => {
                  let newObj = JSON.parse(JSON.stringify(building));
                  newObj.mailingAddress.stateOrProvince = value;
                  onChange(newObj);
                } }
              />
            </FormField>
            <FormField
              label='Zip or Postal Code'
            >
              <TextInput
                value={ building.mailingAddress.zip }
                onChange={ (value) => {
                  let newObj = JSON.parse(JSON.stringify(building));
                  newObj.mailingAddress.zip = value;
                  onChange(newObj);
                } }
              />
            </FormField>
          </Group>
        </VisibilityControl>
      </FormSection>
      <FormSection
        label='Other Details'
      >
        <Group
          gap={ 40 }
        >
          <FormField
            label='Date Of Occupancy'
          >
            <X10_CalendarDateInput
              value={ building.dateOfOccupancy }
              onChange={ (value) => {
                onChange({ ...building, dateOfOccupancy: value })
              } }
            />
          </FormField>
          <FormField
            label='Age In Years'
          >
            <FloatInput
              value={ buildingAgeInYears(building) }
              onChange={ () => { } }
              readOnly={ true }
            />
          </FormField>
        </Group>
        <FormField
          label='Mailbox Type'
        >
          <SelectInput
            value={ building.mailboxType }
            onChange={ (value) => {
              onChange({ ...building, mailboxType: value })
            } }
            options={ MailboxTypeEnumPairs }
          />
        </FormField>
        <FormField
          label='Pet Policy'
        >
          <SelectInput
            value={ building.petPolicy }
            onChange={ (value) => {
              onChange({ ...building, petPolicy: value })
            } }
            options={ PetPolicyEnumPairs }
          />
        </FormField>
      </FormSection>
      <Group
        justifyContent='space-between'
      >
        <Text
          children='* Required'
        />
        <FormSubmitButton
          onClick={ () => save(building) }
        />
      </Group>
    </FormProvider>
  );
}

function save(building: Building) {
  const variables = {
    dbid: building.dbid,
    name: building.name,
    description: building.description,
    dateOfOccupancy: building.dateOfOccupancy,
    mailboxType: building.mailboxType,
    petPolicy: building.petPolicy,
    mailingAddressSameAsPhysical: building.mailingAddressSameAsPhysical,
    units: building.units,
    physicalAddress: building.physicalAddress,
    mailingAddress: building.mailingAddress,
  };

  basicCommitMutation(mutation, variables);
}

const mutation = graphql`
  mutation BuildingFormMutation(
    $dbid: Int!
    $name: String!
    $description: String!
    $dateOfOccupancy: DateTime!
    $mailboxType: MailboxTypeEnum!
    $petPolicy: PetPolicyEnum
    $mailingAddressSameAsPhysical: Boolean!
    $units: [UnitInput!]!
    $physicalAddress: AddressInput!
    $mailingAddress: AddressInput
  ) {
    createOrUpdateBuilding(
      dbid: $dbid
      name: $name
      description: $description
      dateOfOccupancy: $dateOfOccupancy
      mailboxType: $mailboxType
      petPolicy: $petPolicy
      mailingAddressSameAsPhysical: $mailingAddressSameAsPhysical
      units: $units
      physicalAddress: $physicalAddress
      mailingAddress: $mailingAddress
    )
  }
`;

