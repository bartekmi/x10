// This file was auto-generated by x10. Do not modify by hand.
// @flow

import * as React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';

import Group from 'latitude/Group';
import Text from 'latitude/Text';

import DateDisplay from 'react_lib/display/DateDisplay';
import TextDisplay from 'react_lib/display/TextDisplay';
import Button from 'react_lib/latitude_wrappers/Button';
import VerticalStackPanel from 'react_lib/layout/VerticalStackPanel';
import StyleControl from 'react_lib/StyleControl';
import Table from 'react_lib/table/Table';
import x10toString from 'react_lib/utils/x10toString';

import { type Move } from 'small/entities/Move';

import { type Moves_moves } from './__generated__/Moves_moves.graphql';



type Props = {|
  +moves: Moves_moves,
|};
function Moves(props: Props): React.Node {
  const { moves } = props;

  return (
    <VerticalStackPanel>
      <Text
        scale='display'
        weight='bold'
        children='Moves'
      />
      <Table
        data={ moves }
        columns={
          [
            {
              id: '_0',
              Header: 'Date',
              width: 140,
              accessor: (data) => data?.date,
              Cell: ({ value }) =>
                <DateDisplay
                  value={ value }
                />
              ,
            },
            {
              id: '_1',
              Header: 'From',
              width: 140,
              accessor: (data) => data,
              Cell: ({ value }) =>
                <StyleControl
                  maxWidth={ 350 }
                >
                  <TextDisplay
                    value={ value?.from?.name }
                  />
                </StyleControl>
              ,
            },
            {
              id: '_2',
              Header: 'To',
              width: 140,
              accessor: (data) => data,
              Cell: ({ value }) =>
                <StyleControl
                  maxWidth={ 350 }
                >
                  <TextDisplay
                    value={ value?.to?.name }
                  />
                </StyleControl>
              ,
            },
            {
              id: '_3',
              Header: 'Tenant',
              width: 140,
              accessor: (data) => data?.tenant?.name,
              Cell: ({ value }) =>
                <TextDisplay
                  value={ value }
                />
              ,
            },
            {
              id: '_4',
              Header: 'Action',
              width: 140,
              accessor: (data) => data,
              Cell: ({ value }) =>
                <Group
                  alignItems='center'
                >
                  <Button
                    label='View'
                    url={ '/moves/view/' + x10toString(value?.id) }
                  />
                  <Button
                    label='Edit'
                    url={ '/moves/edit/' + x10toString(value?.id) }
                  />
                </Group>
              ,
            },
          ]
        }
      />
    </VerticalStackPanel>
  );
}

// $FlowExpectedError
export default createFragmentContainer(Moves, {
  moves: graphql`
    fragment Moves_moves on Move @relay(plural: true) {
      id
      date
      from {
        id
        toStringRepresentation
        name
      }
      tenant {
        id
        toStringRepresentation
        name
      }
      to {
        id
        toStringRepresentation
        name
      }
    }
  `,
});

