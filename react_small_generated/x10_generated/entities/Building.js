// This file was auto-generated by x10. Do not modify by hand.
// @flow

import { v4 as uuid } from 'uuid';

import { DBID_LOCALLY_CREATED } from 'react_lib/constants';

import { AppContext } from 'AppContext';
import { createDefaultAddress, type Address } from 'entities/Address';
import { type Unit } from 'entities/Unit';
import * as React from 'react';
import { addError, type FormError } from 'react_lib/form/FormProvider';
import { getYear } from 'react_lib/type_helpers/dateFunctions';
import isBlank from 'react_lib/utils/isBlank';
import toNum from 'react_lib/utils/toNum';

// Type Definition
export type Building = {|
  +id: string,
  +dbid: number,
  +moniker: string,
  +name: string,
  +description: string,
  +dateOfOccupancy: ?Date,
  +mailboxType: ?MailboxTypeEnum,
  +petPolicy: ?PetPolicyEnum,
  +mailingAddressSameAsPhysical: boolean,
  +units: $ReadOnlyArray<Unit>,
  +physicalAddress: Address,
  +mailingAddress: Address,
|};


// Enums
export const MailboxTypeEnumPairs = [
  {
    value: 'IN_BUILDING',
    label: 'Mailroom in Building',
  },
  {
    value: 'COMMUNITY',
    label: 'Postal System Community Mailbox',
  },
  {
    value: 'INDIVIDUAL',
    label: 'Mail Delivered to Unit',
  },
];

export type MailboxTypeEnum = 'IN_BUILDING' | 'COMMUNITY' | 'INDIVIDUAL';

export const PetPolicyEnumPairs = [
  {
    value: 'NO_PETS',
    label: 'No Pets',
  },
  {
    value: 'ALL_PETS_OK',
    label: 'All Pets Ok',
  },
  {
    value: 'CATS_ONLY',
    label: 'Cats Only',
  },
  {
    value: 'DOGS_ONLY',
    label: 'Dogs Only',
  },
];

export type PetPolicyEnum = 'NO_PETS' | 'ALL_PETS_OK' | 'CATS_ONLY' | 'DOGS_ONLY';



// Derived Attribute Functions
export function buildingAgeInYears(building: Building): ?number {
  const appContext = React.useContext(AppContext);
  const result = getYear(appContext?.today) - getYear(building.dateOfOccupancy);
  return isNaN(result) ? null : result;
}
export function buildingApplicableWhenForMailingAddress(building: Building): boolean {
  const result = !building.mailingAddressSameAsPhysical;
  return result;
}


// Create Default Function
export function createDefaultBuilding(): Building {
  return {
    id: uuid(),
    dbid: DBID_LOCALLY_CREATED,
    moniker: '1',
    name: '',
    description: '',
    // $FlowExpectedError Required field, but no default value
    dateOfOccupancy: null,
    mailboxType: 'IN_BUILDING',
    petPolicy: null,
    mailingAddressSameAsPhysical: true,
    units: [],
    physicalAddress: createDefaultAddress(),
    mailingAddress: createDefaultAddress(),
  };
}


// Validations
export function buildingCalculateErrors(building: Building, prefix?: string): $ReadOnlyArray<FormError> {
  const appContext = React.useContext(AppContext);
  const errors = [];

  if (isBlank(building.name))
    addError(errors, prefix, 'Name is required', ['name']);
  if (isBlank(building.dateOfOccupancy))
    addError(errors, prefix, 'Date Of Occupancy is required', ['dateOfOccupancy']);
  if (isBlank(building.mailboxType))
    addError(errors, prefix, 'Mailbox Type is required', ['mailboxType']);

  if (toNum(building.dateOfOccupancy) > toNum(appContext?.today))
    addError(errors, prefix, 'Occupancy date cannot be in the future', ['dateOfOccupancy']);

  return errors;
}

